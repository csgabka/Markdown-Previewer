{"version":3,"sources":["components/Input.js","components/Output.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Input","_ref","onType","react_default","a","createElement","className","onChange","id","rows","marked","require","Output","output","dangerouslySetInnerHTML","__html","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","target","value","state","input","src","logo","alt","components_Input","components_Output","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6QAWiBA,SATH,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OACb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,YAAUE,SAAUL,EAAQI,UAAU,eAAeE,GAAG,SAASC,KAAK,SCLtEC,EAASC,EAAQ,IAWJC,EATF,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OACd,OACCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUM,wBAA2B,CAACC,OAAQL,EAAOG,QCwBlDG,cAxBb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFlB,OAAS,SAACsB,GACRP,EAAKQ,SAAS,CAACZ,OAAQW,EAAEE,OAAOC,SAPhCV,EAAKW,MAAQ,CACXC,MAAO,GACPhB,OAAQ,IAJEI,wEAaZ,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,gCACIF,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAMzB,UAAU,WAAW0B,IAAI,SACvC7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAO/B,OAAQkB,KAAKlB,SACpBC,EAAAC,EAAAC,cAAC6B,EAAD,CAAQrB,OAAQO,KAAKQ,MAAMf,iBAnBrBsB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.9f91fd26.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = ({onType}) => {\r\n  \treturn (\r\n  \t\t<div className=\"container\">\r\n  \t\t<h2>Input</h2>\r\n  \t\t<textarea onChange={onType} className=\"form-control\" id=\"editor\" rows=\"5\"></textarea>\r\n  \t\t</div>\r\n  \t\t);\r\n}\r\n\r\n  export default Input;\r\n","import React from 'react';\r\nlet marked = require(\"marked\");\r\n\r\nconst Output = ({output}) => {\r\n  \treturn (\r\n  \t\t<div className=\"container\">\r\n  \t\t<h2>Output</h2>\r\n  \t\t<div id=\"preview\" dangerouslySetInnerHTML = {{__html: marked(output)}}></div>\r\n  \t\t</div>\r\n  \t\t);\r\n}\r\n\r\n  export default Output;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Input from './components/Input';\nimport Output from './components/Output';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      output: \"\"\n    }\n  }\n\n  onType = (e) => {\n    this.setState({output: e.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>Markdown Previewer</h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Input onType={this.onType}/>\n            <Output output={this.state.output}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}